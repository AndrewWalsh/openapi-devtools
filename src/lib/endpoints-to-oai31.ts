import type { Schema } from "genson-js";
import { Endpoint, PartType } from "../utils/types";
import {
  OpenApiBuilder,
  PathItemObject,
  OperationObject,
  ResponsesObject,
  ResponseObject,
  HeadersObject,
  MediaTypeObject,
  ContentObject,
  RequestBodyObject,
  HeaderObject,
  ParameterObject,
} from "openapi3-ts/oas31";

const shouldIncludeRequestBody = (method: string) => {
  return !new Set(["get", "delete", "head"]).has(method.toLowerCase());
};

const createRequestTypes = (body: Schema | undefined) => {
  const mediaTypeObject: MediaTypeObject = {
    schema: body,
  };
  const contentObject: ContentObject = {
    "application/json": mediaTypeObject,
  };
  const requestBodyObject: RequestBodyObject = {
    content: contentObject,
  };
  return requestBodyObject;
};

const createResponseTypes = (
  body: Schema | undefined,
  headers: Schema | undefined,
  statusCode: string
) => {
  const mediaTypeObject: MediaTypeObject = {
    schema: body,
  };
  const contentObject: ContentObject = {
    "application/json": mediaTypeObject,
  };
  const headersObject: HeadersObject = {};

  if (headers && headers.properties) {
    if (headers.properties) {
      Object.entries(headers.properties).forEach(([name, schema]) => {
        const headerObj: HeaderObject = {
          required: false,
          schema,
        };
        headersObject[name] = headerObj;
      });
    }
  }

  const responseObject: ResponseObject = {
    content: contentObject,
    description: "",
    headers: headersObject,
  };
  const responsesObject: ResponsesObject = {
    [statusCode]: responseObject,
  };

  return responsesObject;
};

const createBuilderAndDocRoot = (
  endpoints: Array<Endpoint>
): OpenApiBuilder => {
  const builder = OpenApiBuilder.create({
    openapi: "3.1.0",
    info: {
      title: "OpenAPI Specification",
      version: "1.0.0",
      description: `A specification generated by [openapi-devtools](https://github.com/AndrewWalsh/openapi-devtools). Contains ${
        endpoints.length
      } endpoint${endpoints.length === 1 ? "" : "s"}.`,
    },
    paths: {},
  });
  return builder;
};

const createPathParameterTypes = (
  endpoint: Endpoint
): Array<ParameterObject> => {
  const dynamicParts = endpoint.parts.filter(
    ({ type }) => type === PartType.Dynamic
  );
  const parameters: ParameterObject[] = dynamicParts.map(({ part: name }) => ({
    name,
    in: "path",
    required: true,
    schema: {
      type: "string",
    },
  }));
  return parameters;
};

const createQueryParameterTypes = (
  queryParameters: Schema | undefined
): Array<ParameterObject> => {
  if (!queryParameters?.properties) return [];
  const namesAndSchemas = Object.entries(queryParameters.properties);
  return namesAndSchemas.map(([name, schema]) => {
    const parameterObject: ParameterObject = {
      name,
      in: "query",
      required: false,
      schema,
    };
    return parameterObject;
  });
};

const endpointsToOAI31 = (endpoints: Array<Endpoint>): OpenApiBuilder => {
  const builder = createBuilderAndDocRoot(endpoints);
  const uniqueHosts = new Set();

  for (const endpoint of endpoints) {
    const fullPath = `/${endpoint.parts.map((p) => p.part).join("/")}`;
    uniqueHosts.add(endpoint.host);
    for (const [method, statusCodes] of Object.entries(
      endpoint.leaf.methods
    )) {
      const pathParameterObjects = createPathParameterTypes(endpoint);
      for (const [statusCode, schema] of Object.entries(statusCodes)) {
        const methodLower = method.toLowerCase();
        const queryParameterObjects = createQueryParameterTypes(
          endpoint.leaf.methods[method][statusCode].queryParameters
        );
        const requestBody = createRequestTypes(schema.requestBody);
        const responses = createResponseTypes(
          schema.responseBody,
          schema.responseHeaders,
          statusCode
        );
        const operation: OperationObject = {
          summary: fullPath,
          description: `**Host**: http://${endpoint.host}`,
          responses,
        };
        const allParameterObjects = [
          ...pathParameterObjects,
          ...queryParameterObjects,
        ];
        if (allParameterObjects.length) {
          operation.parameters = allParameterObjects;
        }
        if (shouldIncludeRequestBody(method) && schema.requestBody) {
          operation.requestBody = requestBody;
        }
        // The method (e.g. get) and the operation on it
        const pathItemObject: PathItemObject = {
          [methodLower]: operation,
        };
        const path = `${endpoint.parts.length ? "/" : ""}${endpoint.parts
          .map((p) => p.part)
          .join("/")}`;
        // const pathObject: PathObject = {
        //   [path]: pathItemObject,
        // };
        // Assign into doc
        const { rootDoc } = builder;
        rootDoc.paths = rootDoc.paths || {};
        const specPath = rootDoc.paths?.[path];
        if (specPath) {
          specPath[methodLower as 'get'] = operation;
        } else {
          rootDoc.paths[path] = pathItemObject;
        }
      }
    }
  }

  return builder;
};

export default endpointsToOAI31;
